generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  CUSTOMER
  FUNERAL_SERVICE
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customers Customer[]
  funeralServices FuneralService[]
  messagesSent     Message[]         @relation("SentMessages")
  messagesReceived Message[]         @relation("ReceivedMessages")
}

model Customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  bookings    Booking[]
   
}

model FuneralService {
  id           Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  location     String
  phone  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       Int 
  user         User       @relation(fields: [userId], references: [id])
  services     Service[]
  bookings     Booking[]
}

model Service {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Float
  serviceType     ServiceType
  funeralServiceId Int
  funeralService  FuneralService   @relation(fields: [funeralServiceId], references: [id])
  casketDetails   CasketDetail[]   // 1 Service = many CasketDetail
  flowerDetails   FlowerDetail[]   // 1 Service = many FlowerDetail
  bookings        Booking[]
}

model CasketDetail {
  id          Int      @id @default(autoincrement())
  serviceId   Int
  service     Service   @relation(fields: [serviceId], references: [id])
  color       String
  width       Float
  height      Float
  casketType  String
  price       Float  
}

model FlowerDetail {
  id          Int        @id @default(autoincrement())
  serviceId   Int
  service     Service     @relation(fields: [serviceId], references: [id])
  color       String
  size        FlowerSize
  flowerType  String
  price       Float      
}

enum FlowerSize {
  SMALL
  MEDIUM
  LARGE
}

enum ServiceType {
  FLOWERS
  CASKET
  RENT_MEMORIAL
}


model Booking {
  id                Int        @id @default(autoincrement())
  customerId        Int
  funeralServiceId  Int
  serviceId         Int
  bookingStatus     BookingStatus
  bookingDate       DateTime   @default(now())
  location          String
  customer          Customer   @relation(fields: [customerId], references: [id])
  funeralService    FuneralService @relation(fields: [funeralServiceId], references: [id])
  service           Service    @relation(fields: [serviceId], references: [id])
  conversation    Conversation?   @relation()
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PREPARING_ITEMS
  ON_THE_WAY
  COMPLETED
  CANCELED
}


model Conversation {
  id          Int      @id @default(autoincrement())
  bookingId   Int      @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  messages    Message[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id              Int          @id @default(autoincrement())
  content         String?
  attachedImageUrl String?
  senderId        Int
  receiverId      Int
  conversationId  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  sender          User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver        User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])
}